# -*- coding: utf-8 -*-
"""Accretion Rate vs. Mass by BanyanΣ SFR & Histogram of Distances.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1VTodWqkIuDumZRDE8nSoV42HOpfEVwJn

# **Accretion Rate vs. Mass by BanyanΣ SFR & Histogram of Distances**

## This notebook generates an Accretion Rate vs. Mass plot by Banyan Sigma Star Forming Region (color) and distance (size). This notebook also contains a histogram of distances at the end.

## Written by Carson Marano



---
"""

from google.colab import drive
drive.mount('/content/drive')

# Commented out IPython magic to ensure Python compatibility.
#setup
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import matplotlib as mpl
# %matplotlib inline
import scipy.stats as st
import scipy.optimize as opt
from astropy import units as u
from astropy.coordinates import SkyCoord
import seaborn as sns
from sklearn import preprocessing

pd.set_option('display.max_columns', None)
pd.set_option('display.max_rows', None)

CASPARwBanyan = pd.read_excel('/content/drive/MyDrive/CASPAR/Summer 2021 Work/Carson Work/CASPAR_w_banyan.xlsx')

CASPARwBanyan.head()

#Get SFR in lists
field = []
tau = []
poph = []
taurus = []
tucansa = []
twhya = []
ucl = []
uca = []
us = []

j = 0
for i in CASPARwBanyan['Association']:
  if (i == "FIELD"):
    field.append(CASPARwBanyan.iloc[j]['Simbad'])
  elif (i == "118 Tau"):
    tau.append(CASPARwBanyan.iloc[j]['Simbad'])
  elif (i == "p Oph"):
    poph.append(CASPARwBanyan.iloc[j]['Simbad'])
  elif (i == "Taurus"):
    taurus.append(CASPARwBanyan.iloc[j]['Simbad'])
  elif (i == "Tucana-Horologium"):
    tucansa.append(CASPARwBanyan.iloc[j]['Simbad'])
  elif (i == "TW Hya"):
    twhya.append(CASPARwBanyan.iloc[j]['Simbad'])
  elif (i == "Upper Centaurus Lupus"):
    ucl.append(CASPARwBanyan.iloc[j]['Simbad'])
  elif (i == "Upper CrA"):
    uca.append(CASPARwBanyan.iloc[j]['Simbad'])
  elif (i == "Upper Scorpius"):
    us.append(CASPARwBanyan.iloc[j]['Simbad'])
  j += 1

#Remove the duplicates
uca = list(set(uca))
field = list(set(field))
tau = list(set(tau))
poph = list(set(poph))
taurus = list(set(taurus))
tucansa = list(set(tucansa))
twhya = list(set(twhya))
ucl = list(set(ucl))
us = list(set(us))

#Slope-Int Function
def slopeintfunc(x, sl, intcpt):
  return sl*x+intcpt

"""## Plotting the Accretion Rate vs. Mass by SFR



---


"""

def plotPoints(regionName, labelName, symbol):
  '''This function takes in 3 inputs for regionName, labelName, and symbol and then creates a graph.
  regionName is a list of objects in a star forming region; labelName is a string used for the label on the legend;
  symbol is just a string to be used for the color of the SFR.'''
  
  #Declare Variables
  logMassList = []
  logAccRateList = []
  distList = []

  #Plot the points
  for name in regionName:
    #Mass
    mass = CASPARwBanyan.loc[CASPARwBanyan['Simbad'] == name]['Mass'].tolist()[0]
    
    #Accretion Rate
    accRate = CASPARwBanyan.loc[CASPARwBanyan['Simbad'] == name]['Accretion Rate'].tolist()[0]

    #Distance
    dist = CASPARwBanyan.loc[CASPARwBanyan['Simbad'] == name]['GAIA EDR3 Dist.'].tolist()[0]

    #Get logs
    logMass = np.log10(mass)
    logAccRate = np.log10(accRate)

    #Check for inf
    if (np.isinf(logMass).any() or np.isinf(logAccRate).any() or np.isnan(dist).any()):
      continue
    else:
      logMassList.append(logMass)
      logAccRateList.append(logAccRate)
      distList.append(dist)


  #Normalize sizes of dists
  norm = [(float(i)/max(distList)) * 250 for i in distList]
  #norm = [(float(i)/10) for i in distList]

  #Regression Width Based on Avg. Dist
  w = np.sum(distList) / len(distList)
  avgDist = ("Avg. Dist of %s: " % labelName + w.astype(str)[0:6])

  #Plot the points
  sampleSize = len(logMassList)
  scatter = plt.scatter(logMassList, logAccRateList, edgecolor='k', c=symbol, label = labelName + " (n=%s)" % sampleSize, alpha=0.6, s=norm)

  #Plot Regression Line
  fit = opt.curve_fit(slopeintfunc, logMassList, logAccRateList)
  slope = fit[0][0]
  intcpt = fit[0][1]

  #Line Width Refers to Average Distance
  if labelName == "Field":
    plt.plot(np.array([-2.3, 1]), slopeintfunc(np.array([-2.3, 1]), slope, intcpt), symbol+"--", label = "$\.{M}$ = $M^{%s}$" % str(slope)[0:4] + " " + avgDist, linewidth=3, alpha=0.4)
  elif labelName == "Upper Centaurus Lupus":
    plt.plot(np.array([-2.3, 1]), slopeintfunc(np.array([-2.3, 1]), slope, intcpt), symbol+"--", label = "$\.{M}$ = $M^{%s}$" % str(slope)[0:4] + " " + avgDist, linewidth=7, alpha=0.4)
  else:
    plt.plot(np.array([-2.3, 1]), slopeintfunc(np.array([-2.3, 1]), slope, intcpt), symbol+"--", label = "$\.{M}$ = $M^{%s}$" % str(slope)[0:4] + " " + avgDist, linewidth=10, alpha=0.4)

#Set Figure Parameters and Title/Labels
plt.figure(figsize=(25, 20), dpi=750)
plt.rcParams.update({'font.size': 22})
plt.title("Mass Accretion Rate vs. Mass")
plt.rcParams.update({'font.size': 18})
plt.xlabel("Log M ($M_{\odot}$)")
plt.ylabel("Log $\.{M}$ ($M_{\odot}$/yr)")

#Burning Limits
from matplotlib.pyplot import text
HBL = 0.07
DBL = 0.0124096
plt.axvline(np.log10(HBL),color='black',linewidth=1) #hyrdrogen BL
text(np.log10(HBL)-0.08, -7, "Hydrogen Burning Limit", rotation=90, verticalalignment='center')
plt.axvline(np.log10(DBL),color='black',linewidth=1) #deuterium BL
text(np.log10(DBL)-0.08, -7, "Deuterium Burning Limit", rotation=90, verticalalignment='center')
text(-1.85, -6, "Brown Dwarfs", verticalalignment='center')
text(-0.75, -6, "Stars", verticalalignment='center')

#Plot the Points
plt.rcParams.update({'font.size': 12})
plotPoints(field, "Field", "m")
#plotPoints(tau, "118 Tau", "ro")
plotPoints(poph, "p Oph", "b")
plotPoints(taurus, "Taurus", 'g')
#plotPoints(twhya, "Tw Hya", 'co')
plotPoints(ucl, "Upper Centaurus Lupus", 'y')

#Show legend
plt.legend(loc='lower right')

#Making a size scale manually
text(-2.47, -4.9, "Size Scale", verticalalignment='center')
plt.scatter(-2.45, -5, s=25, c='k', alpha=0.5)
text(-2.42, -5, "> 500 pc", verticalalignment='center')
plt.scatter(-2.45, -5.1, s=100, c='k', alpha=0.5)
text(-2.42, -5.1, "~250 pc", verticalalignment='center')
plt.scatter(-2.45, -5.22, s=150, c='k', alpha=0.5)
text(-2.42, -5.22, "~100 pc", verticalalignment='center')

#Limits
plt.xlim([-2.5, 1])
plt.ylim([-12.5, -4.8])
plt.show()

"""## Making same plot but with infered SFRs (Chameleon I & ${\sigma}$ ori)



---


"""

#List of Probable Sigma Ori Association Objects
sigOriNames = ['2MASS J05042998-0347142', '2MASS J05371326-0635005', '2MASS J05374708-0642301', '2MASS J05380097-0226079', '2MASS J05380674-0230227', '2MASS J05381319-0226088', '2MASS J05381778-0240500', '2MASS J05381824-0248143', '2MASS J05382050-0234089', '2MASS J05382307-0236493', '2MASS J05382333-0225345', '2MASS J05382358-0220475', '2MASS J05382543-0242412', '2MASS J05382684-0238460', '2MASS J05382751-0235042', '2MASS J05382896-0248473', '2MASS J05383141-0236338', '2MASS J05383158-0235149', '2MASS J05383405-0236375', '2MASS J05383460-0241087', '2MASS J05383587-0243512', '2MASS J05383902-0245321', '2MASS J05383976-0232203', '2MASS J05384027-0230185', '2MASS J05384053-0233275', '2MASS J05384159-0230289', '2MASS J05384423-0240197', '2MASS J05384448-0240376', '2MASS J05384537-0241594', '2MASS J05384755-0227120', '2MASS J05384809-0228536', '2MASS J05384818-0244007', '2MASS J05384928-0223575', '2MASS J05385038-0226477', '2MASS J05385060-0242429', '2MASS J05385200-0246436', '2MASS J05385831-0216101', '2MASS J05385922-0233514', '2MASS J05390136-0218274', '2MASS J05390193-0235029', '2MASS J05390297-0241272', '2MASS J05390357-0246269', '2MASS J05390387-0220081', '2MASS J05390760-0232391', '2MASS J05390853-0251465', '2MASS J05390878-0231115', '2MASS J05391001-0228116', '2MASS J05391151-0231065', '2MASS J05391308-0237509', '2MASS J05391582-0236507', '2MASS J05391883-0230531', '2MASS J05392174-0244038', '2MASS J05392519-0238220', '2MASS J05392633-0228376', '2MASS J05392677-0242583', '2MASS J05392685-0236561', '2MASS J05392935-0227209', '2MASS J05394318-0232433', '2MASS J05394450-0224432', '2MASS J05394944-0223459', '2MASS J05395362-0233426', '2MASS J05395421-0227326', '2MASS J05395433-0237189', '2MASS J05395465-0246341', '2MASS J05400101-0219597', '2MASS J05400195-0221325', '2MASS J05400889-0233337', '2MASS J05410229-0243006', '2MASS J05431188-0459499']

#List of Probable Chameleon I Association Objects
chaNames = ['2MASS J10561638-7630530','2MASS J10580597-7711501','2MASS J11011926-7732383','2MASS J11063276-7625210','2MASS J11063799-7743090','2MASS J11070324-7610565','2MASS J11071668-7735532','2MASS J11071860-7732516','2MASS J11072443-7743489','2MASS J11073775-7735308','2MASS J11074245-7733593','2MASS J11075225-7736569','2MASS J11075993-7715317','2MASS J11080148-7742288','2MASS J11080234-7640343','2MASS J11082404-7739299','2MASS J11082410-7741473','2MASS J11082927-7739198','2MASS J11083952-7734166','2MASS J11092379-7623207','2MASS J11095215-7639128','2MASS J11102226-7625138','2MASS J11104141-7720480','2MASS J11122772-7644223','2MASS J11173792-7646193',]

#Get SFR in lists
field = []
tau = []
poph = []
taurus = []
tucansa = []
twhya = []
ucl = []
uca = []
us = []

j = 0
for i in CASPARwBanyan['Association']:
  if ((i == "FIELD")):
    field.append(CASPARwBanyan.iloc[j]['Simbad'])
    #print(CASPARwBanyan.iloc[j]['Simbad'])
  elif (i == "118 Tau"):
    tau.append(CASPARwBanyan.iloc[j]['Simbad'])
  elif (i == "p Oph"):
    poph.append(CASPARwBanyan.iloc[j]['Simbad'])
  elif (i == "Taurus"):
    taurus.append(CASPARwBanyan.iloc[j]['Simbad'])
  elif (i == "Tucana-Horologium"):
    tucansa.append(CASPARwBanyan.iloc[j]['Simbad'])
  elif (i == "TW Hya"):
    twhya.append(CASPARwBanyan.iloc[j]['Simbad'])
  elif (i == "Upper Centaurus Lupus"):
    ucl.append(CASPARwBanyan.iloc[j]['Simbad'])
  elif (i == "Upper CrA"):
    uca.append(CASPARwBanyan.iloc[j]['Simbad'])
  elif (i == "Upper Scorpius"):
    us.append(CASPARwBanyan.iloc[j]['Simbad'])
  j += 1

#Set Figure Parameters and Title/Labels
plt.figure(figsize=(25, 20), dpi=750)
plt.rcParams.update({'font.size': 22})
plt.title("Mass Accretion Rate vs. Mass")
plt.rcParams.update({'font.size': 18})
plt.xlabel("Log M ($M_{\odot}$)")
plt.ylabel("Log $\.{M}$ ($M_{\odot}$/yr)")

#Burning Limits
from matplotlib.pyplot import text
HBL = 0.07
DBL = 0.0124096
plt.axvline(np.log10(HBL),color='black',linewidth=1) #hyrdrogen BL
text(np.log10(HBL)-0.08, -7, "Hydrogen Burning Limit", rotation=90, verticalalignment='center')
plt.axvline(np.log10(DBL),color='black',linewidth=1) #deuterium BL
text(np.log10(DBL)-0.08, -7, "Deuterium Burning Limit", rotation=90, verticalalignment='center')
text(-1.85, -6, "Brown Dwarfs", verticalalignment='center')
text(-0.75, -6, "Stars", verticalalignment='center')

#Test
newFieldLen = len(field) - len(sigOriNames) - len(chaNames)

#Plot the Points
plt.rcParams.update({'font.size': 12})
plotPoints(field, "Field (n=%s)" % newFieldLen, "m")
plotPoints(poph, "p Oph", "b")
plotPoints(taurus, "Taurus", 'g')
plotPoints(ucl, "Upper Centaurus Lupus", 'y')


#Sigma Ori Plotting

#Declare Variables
logMassList = []
logAccRateList = []
distList = []

#Plot the points
for name in sigOriNames:
  #Mass
  mass = CASPARwBanyan.loc[CASPARwBanyan['Unique Name'] == name]['Mass'].tolist()[0]
  
  #Accretion Rate
  accRate = CASPARwBanyan.loc[CASPARwBanyan['Unique Name'] == name]['Accretion Rate'].tolist()[0]

  #Distance
  dist = CASPARwBanyan.loc[CASPARwBanyan['Unique Name'] == name]['GAIA EDR3 Dist.'].tolist()[0]

  #Get logs
  logMass = np.log10(mass)
  logAccRate = np.log10(accRate)

  #Check for inf
  if (np.isinf(logMass).any() or np.isinf(logAccRate).any() or np.isnan(dist).any()):
    continue
  else:
    logMassList.append(logMass)
    logAccRateList.append(logAccRate)
    distList.append(dist)
#Normalize sizes of dists
norm = [(float(i)/max(distList)) * 250 for i in distList]
#norm = [(float(i)/10) for i in distList]

#Regression Width Based on Avg. Dist
w = np.sum(distList) / len(distList)
avgDist = ("Avg. Dist of ${\sigma}$ Ori: " + w.astype(str)[0:6])

#Plot the points
sampleSize = len(logMassList)
scatter = plt.scatter(logMassList, logAccRateList, edgecolor='k', c='r', label = '${\sigma}$ Ori' + " (n=%s)" % sampleSize, alpha=0.8, s=norm)

#Plot Regression Line
fit = opt.curve_fit(slopeintfunc, logMassList, logAccRateList)
slope = fit[0][0]
intcpt = fit[0][1]

plt.plot(np.array([-2.3, 1]), slopeintfunc(np.array([-2.3, 1]), slope, intcpt), "r--", label = "$\.{M}$ = $M^{%s}$" % str(slope)[0:4] + " " + avgDist, linewidth=5, alpha=0.4)


#Chameleon I

#Declare Variables
logMassList = []
logAccRateList = []
distList = []

#Plot the points
for name in chaNames:
  #Mass
  mass = CASPARwBanyan.loc[CASPARwBanyan['Unique Name'] == name]['Mass'].tolist()[0]
  
  #Accretion Rate
  accRate = CASPARwBanyan.loc[CASPARwBanyan['Unique Name'] == name]['Accretion Rate'].tolist()[0]

  #Distance
  dist = CASPARwBanyan.loc[CASPARwBanyan['Unique Name'] == name]['GAIA EDR3 Dist.'].tolist()[0]

  #Get logs
  logMass = np.log10(mass)
  logAccRate = np.log10(accRate)

  #Check for inf
  if (np.isinf(logMass).any() or np.isinf(logAccRate).any() or np.isnan(dist).any()):
    continue
  else:
    logMassList.append(logMass)
    logAccRateList.append(logAccRate)
    distList.append(dist)
#Normalize sizes of dists
norm = [(float(i)/max(distList)) * 250 for i in distList]
#norm = [(float(i)/10) for i in distList]

#Regression Width Based on Avg. Dist
w = np.sum(distList) / len(distList)
avgDist = ("Avg. Dist of Chameleon I: " + w.astype(str)[0:6])

#Plot the points
sampleSize = len(logMassList)
scatter = plt.scatter(logMassList, logAccRateList, edgecolor='k', c='c', label = 'Chameleon I' + " (n=%s)" % sampleSize, alpha=0.8, s=norm)

#Plot Regression Line
fit = opt.curve_fit(slopeintfunc, logMassList, logAccRateList)
slope = fit[0][0]
intcpt = fit[0][1]

plt.plot(np.array([-2.3, 1]), slopeintfunc(np.array([-2.3, 1]), slope, intcpt), "c--", label = "$\.{M}$ = $M^{%s}$" % str(slope)[0:4] + " " + avgDist, linewidth=8, alpha=0.4)




plt.rcParams.update({'font.size': 18})

#Show legend
plt.legend(loc='lower right')

#Making a size scale manually
text(-2.45, -4.95, "Size Scale", verticalalignment='center')
plt.scatter(-2.45, -5.1, s=25, c='k', alpha=0.5)
text(-2.42, -5.1, "> 500 pc", verticalalignment='center')
plt.scatter(-2.45, -5.22, s=100, c='k', alpha=0.5)
text(-2.42, -5.22, "~250 pc", verticalalignment='center')
plt.scatter(-2.45, -5.34, s=150, c='k', alpha=0.5)
text(-2.42, -5.34, "~100 pc", verticalalignment='center')

#Limits
plt.xlim([-2.5, 1])
plt.ylim([-12.5, -4.8])
plt.show()

"""## Histogram of Distance


---


"""

edr3_dist = []
for i in range(len(CASPARwBanyan)):
  dist = CASPARwBanyan.iloc[i]['GAIA EDR3 Dist.']
  edr3_dist.append(dist)

plt.hist(np.log10(edr3_dist), bins=10)
plt.xlabel("Log Distance (pc)")
plt.ylabel("Frequency")
plt.title("Histogram of Distances")
plt.show()

